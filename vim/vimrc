set nocompatible               " be iMproved
filetype off                   " required!

" Vundle configurations.
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" original repos on github
" ---------------------------------------------------------------------------
" Git wrapper for vim. Who needs git bash any more ;)
Bundle 'tpope/vim-fugitive'

" Navigate the document like a pro. Who needs a mouse any more ;)
Bundle 'Lokaltog/vim-easymotion'

" Enable tag list. Make sure you have ctags installed
Bundle "taglist.vim"
let Tlist_Ctags_Cmd="/usr/local/Cellar/ctags/5.8/bin/ctags" " I need this in my MAC
nnoremap <silent> <F7> :TlistToggle<CR>

" Opens a toolbar with method and class indexes
Bundle 'majutsushi/tagbar.git' 
" Enable Tags bar in the side
nmap <F8> :TagbarToggle<CR>

" Syntax Highlighter
Bundle 'scrooloose/syntastic.git'
let g:syntastic_check_on_open=1 " Enable syntax check when a file is opened or saved
nmap <F6> :SyntasticToggleMode<CR> " Toggle Syntax highlight

" Zen Coding. Expands HTML abbreviations. Need to decide between one of these
Bundle 'mattn/zencoding-vim.git' 
let g:use_zen_complete_tag = 1 " for tag auto complete.
" Similar to Zen coding. But uses <c-e> as shortcut
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}

" Automatically close tags, quotes etc
Bundle 'Raimondi/delimitMate'

" Show diff of the current file from scms. Who needs Tortoise svn any more ;)
Bundle 'sudar/vim-scmdiff.git'

" Smart find and replace
Bundle 'tpope/vim-abolish'

" Surround - Easily change, add and delete around surroundings
Bundle 'tpope/vim-surround'
" Key mappings
" Normal mode
"-----------
"ds  - delete a surrounding
"cs  - change a surrounding
"ys  - add a surrounding
"yS  - add a surrounding and place the surrounded text on a new line + indent it
"yss - add a surrounding to the whole line
"ySs - add a surrounding to the whole line, place it on a new line + indent it
"ySS - same as ySs

"Visual mode
"-----------
"s   - in visual mode, add a surrounding
"S   - in visual mode, add a surrounding but place text on new line + indent it

"Insert mode
"-----------
"<CTRL-s> - in insert mode, add a surrounding
"<CTRL-s><CTRL-s> - in insert mode, add a new line + surrounding + indent
"<CTRL-g>s - same as <CTRL-s>
"<CTRL-g>S - same as <CTRL-s><CTRL-s>

"  Repeat the last command. Press . to repeat the last command.
Bundle "tpope/vim-repeat"

" ---------------------------------------------------------------------------
  
" Snippet manager. When you get all Snippets, who needs Textmate anymore ;)
" Dependencies
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
" Additional snippets for snipmate
Bundle 'honza/snipmate-snippets'
" Add the main Plugin
Bundle 'garbas/vim-snipmate'

" ---------------------------------------------------------------------------
" Open an auto complete popup. Who needs an IDE anymore.
Bundle 'Shougo/neocomplcache'

" configurations. More configurations at https://github.com/Shougo/neocomplcache
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Recommended key-mappings.
" <CR>: close popup and save indent.
" inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Additional Mapping
inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
"inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

" Use tab for completion
Bundle 'ervandew/supertab'

" ---------------------------------------------------------------------------

" Edit taskpaper files in vim
Bundle "davidoc/taskpaper.vim"

" Tag generation and syntax highlights. Make sure ctags is installed
Bundle 'xolox/vim-easytags'
let g:easytags_by_filetype="~/.vim/tags/" " store the tags in separate files inside this folder

" vim-scripts repos
" ---------------------------------------------------------------------------

" Makes searching easier
Bundle 'L9'
Bundle 'FuzzyFinder'

" Automatically match tags and braces in different files. 
Bundle 'matchit.zip'
" Python match support
Bundle 'python_match.vim'

" Bulk (Un)Comment line. 
Bundle 'comments.vim'

" Smart yanking
Bundle 'YankRing.vim'
nmap <Leader>yy :YRShow<CR>

" Color Parenthesis in multiple colors 
Bundle 'Rainbow-Parenthsis-Bundle'

" Display TODO from different opened files.
Bundle "TaskList.vim"

" non github repos
" ---------------------------------------------------------------------------
" Shows the list of files in the current directory. Who needs. Textmate any more ;)
" Make sure you have ruby mappings enabled in Vim and compile the C extension
" after installing this Plugin
Bundle 'git://git.wincent.com/command-t.git'
" Command T mappings. Who needs Textmate anymore ;)
nnoremap <silent> <Leader>tt :CommandT<CR>
nnoremap <silent> <Leader>b :CommandTBuffer<CR>

" ------------------ Color Schemes ---------------------------------------------------------

" Color Schemes explorer. Browse through the different color schemes
Bundle 'Color-Scheme-Explorer'

" Programmer Color scheme
Bundle 'pw' 

" Light ColorScheme
Bundle 'lightdiff'

" 256 color schemes
Bundle 'Eddie.vim'
Bundle 'desert256.vim'
Bundle 'ciaranm/inkpot'
Bundle '256-grayvim'

" Set the default color scheme
colorscheme desert256

" color schemes
if &t_Co >= 256 || has("gui_running")
   colorscheme desert 
endif

" Show diff of changes that have been made after the file has been opened
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
             \ | wincmd p | diffthis
endif

" ----------------- Space and Tab related settings ----------------------------

set expandtab     " Expand tab to spaces
set tabstop=4     " Width of a tab is 4
set shiftwidth=4  " number of spaces to use for auto indenting
set softtabstop=4 " When backspace is used to delete spaces, delete 4 at a time. This is equal to tabstop and shfitwidth

set nowrap        " don't wrap lines
set scrolloff=5   " Show atleast 5 lines around the cursor

set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoindent    " always set auto indenting on
set copyindent    " copy the previous indentation on autoindenting
set smartindent   " Set intent smartly

set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop

set number        " always show line numbers
set ruler         " Show the current line number in the status bar

" ---------------------------------------------------------------------------
" Common settings
" ----------------------------------------------------------------------------
set hidden		  " Hides buffer instead of closing them. You can use <C-o> and <C-i> to iterate the buffers.

" Set to auto read when a file is changed from the outside
set autoread

" History related settings
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo

" Visual settings
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

" Filesystem handling settings
set nobackup
set noswapfile
set wildignore=*.swp,*.bak,*.pyc,*.class "Ignore these files while doing file completion
set wildmode=longest,list " Start file completion with the longest match

" Search related settings
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,case-sensitive otherwise
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set gdefault	  " Make search/replace global

" Clear highlighted searches
nmap <silent> ,/ :nohlsearch<CR>

" Use Tab for moving to next matching tag
nnoremap <tab> %
vnoremap <tab> %

" Enable automatic spell correction
set spell

" Enable Mouse
set mouse=a

" Highlight current line and column
au WinLeave * set nocursorline " nocursorcolumn
au WinEnter * set cursorline " cursorcolumn
set cursorline " cursorcolumn

" ----------------------------------------------------------------------------
" Command Mode settings
" ----------------------------------------------------------------------------

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" This shows what you are typing as a command.  I love this!
set showcmd

" ----------------------------------------------------------------------------
" Key mappings
" ----------------------------------------------------------------------------
"  
" Paste without messing up formatting.
set pastetoggle=<F2>

"Select previously pasted text for quick formatting.
nnoremap <leader>v V`]

" change the mapleader from \ to ,
let mapleader=","

" Map ; to : so that you can save pressing shift
nnoremap ; :

" forgot sudo while opening the file
cmap w!! w !sudo tee % >/dev/null

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Mapping for tabs
nmap <silent> <Leader>h :tabp<CR>
nmap <silent> <Leader>l :tabn<CR>
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt
nmap <leader>0 10gt

" Easy window navigation. Prevents another keypress.
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Escape insert mode without pressing esc
:imap jj <Esc>

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> Zj o<Esc>
nnoremap <silent> Zk O<Esc>

" Map F1 key to Esc. Would be interested in those situations where you hit f1 by default
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

"Move a line of text using ALT+[jk] 
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Automatically cd into the directory that the file is in
autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')

" Save and load folds while closing and opening files
au BufWinLeave * mkview
au BufWinEnter * silent loadview

" ----------------------------------------------------------------------------
" File type specific settings
" ----------------------------------------------------------------------------
filetype plugin indent on

if &t_Co > 2 || has("gui_running")
   	" switch syntax highlighting on, when the terminal has colors
    syntax on
endif

" -------- HTML/CSS -----------------------
"Fold HTML Tag
nnoremap <leader>ft Vatzf

"Sort CSS properties
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>

" -------- JavaScript -------------------------------------------------------------
au FileType javascript call JavaScriptFold() "The default folding in JavaScript is broken
au FileType javascript setl fen
au FileType javascript setl nocindent

function! JavaScriptFold()
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction

" -------- PHP --------------------------------------------------------------------
let php_folding = 1        "Set PHP folding of classes and functions.
let php_htmlInStrings = 1  "Syntax highlight HTML code inside PHP strings.
let php_sql_query = 1      "Syntax highlight SQL code inside PHP strings.
let php_noShortTags = 1    "Disable PHP short tags.

" -------- Python -----------------------
autocmd filetype python set expandtab

" -------- Perl -----------------------
let perl_fold=1               " Perl

" -------- R -----------------------
let r_syntax_folding=1        " R

" -------- Ruby -----------------------
let ruby_fold=1               " Ruby

" -------- Shell Scripts -----------------------
let sh_fold_enabled=1         " sh

" -------- Vim Scripts -----------------------
let vimsyn_folding='af'       " Vim script

" -------- XML Files -----------------------
let xml_syntax_folding=1      " XML
