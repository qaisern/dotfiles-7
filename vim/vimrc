set nocompatible               " be iMproved
filetype off                   " required!

" ---------------------------------------------------------------------------
" Vundle configurations.
" ---------------------------------------------------------------------------
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

" ---------------------------------------------------------------------------
" Source Control Management
" ---------------------------------------------------------------------------
" Git wrapper for vim. Who needs git bash any more ;)
Bundle 'tpope/vim-fugitive'

" Show diff of the current file from scms. Who needs Tortoise svn any more ;)
" Press :D to check the diff. <leader>s to toggle diff view
Bundle 'sudar/vim-scmdiff.git'

" Show diff of changes that have been made after the file has been opened
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
             \ | wincmd p | diffthis
endif

" ---------------------------------------------------------------------------
" Navigation
" ---------------------------------------------------------------------------
" Navigate the document like a pro. Who needs a mouse any more ;)
" Press <leader><Leader>j or <Leader><Leader>k
Bundle 'Lokaltog/vim-easymotion'

" ---------------------------------------------------------------------------
" Source code handling
" ---------------------------------------------------------------------------
" TODO: Need to decide between one of these two
" Enable tag list. Make sure you have ctags installed
Bundle "taglist.vim"
if executable("/usr/local/Cellar/ctags/5.8/bin/ctags")
    let Tlist_Ctags_Cmd="/usr/local/Cellar/ctags/5.8/bin/ctags" " I need this in my MAC
endif
nnoremap <silent> <F7> :TlistToggle<CR>

" Tag generation and syntax highlights. Make sure ctags is installed
Bundle 'xolox/vim-easytags'
let g:easytags_by_filetype="~/.vim/tags/" " store the tags in separate files inside this folder

" Opens a toolbar with method and class indexes
Bundle 'majutsushi/tagbar.git' 
" Enable Tags bar in the side
nmap <F8> :TagbarToggle<CR>

" Syntax Highlighter
Bundle 'scrooloose/syntastic.git'
let g:syntastic_check_on_open=1 " Enable syntax check when a file is opened or saved
let g:syntastic_auto_jump=1 "Automatically jump to the first error
let g:syntastic_auto_loc_list=1
nmap <F6> :SyntasticToggleMode<CR> " Toggle Syntax highlight

" Show signs at locations which are of interest in Quickfix window
Bundle 'tomtom/quickfixsigns_vim'

" Bulk (Un)Comment line. 
Bundle 'comments.vim'

" Automatically close tags, quotes etc
Bundle 'Raimondi/delimitMate'
let delimitMate_expand_cr=1
let delimitMate_expand_space=1

" Automatically match tags and braces in different files. 
Bundle 'matchit.zip'
" Python match support
Bundle 'python_match.vim'

" Use tab for completion
Bundle 'ervandew/supertab'

" Smart yanking
Bundle 'YankRing.vim'
nmap <Leader>yy :YRShow<CR>
let g:yankring_history_dir = '~/.vim/yankring'

" Display TODO from different opened files. Press <leader>tt to see the list
Bundle "TaskList.vim"

" Allows you to split and joins lines and reformat them
" Alternatively you can also use :s/<[^>]*>/\r&\r/g followed by :g/^$/d
Bundle "AndrewRadev/splitjoin.vim"
nmap <Leader>sjj :SplitjoinJoin<cr>
nmap <Leader>sjs :SplitjoinSplit<cr>

"Allows to align variable declarations
" Use the <leader>t= shortcut
Bundle "Align"

" Surround - Easily change, add and delete around surroundings
Bundle 'tpope/vim-surround'
" Key mappings
" Normal mode
"-----------
"ds  - delete a surrounding
"cs  - change a surrounding
"ysiw(  - add a surrounding
"ys2aw" - add a surrounding for two words
"yS  - add a surrounding and place the surrounded text on a new line + indent it
"yss - add a surrounding to the whole line
"ySs - add a surrounding to the whole line, place it on a new line + indent it
"ySS - same as ySs

"Visual mode
"-----------
"s   - in visual mode, add a surrounding
"S   - in visual mode, add a surrounding but place text on new line + indent it

"Insert mode
"-----------
"<CTRL-s> - in insert mode, add a surrounding
"<CTRL-s><CTRL-s> - in insert mode, add a new line + surrounding + indent
"<CTRL-g>s - same as <CTRL-s>
"<CTRL-g>S - same as <CTRL-s><CTRL-s>

"  Repeat the last command. Press . to repeat the last command.
Bundle "tpope/vim-repeat"

" ---------------------------------------------------------------------------
" Searching/Replacing
" ---------------------------------------------------------------------------
" Smart find and replace
Bundle 'tpope/vim-abolish'

" To use ack inside vim. You need to install ack. Either do brew install ack or use aptitude
Bundle 'mileszs/ack.vim'

" Makes searching easier
Bundle 'L9'
Bundle 'FuzzyFinder'

" ---------------------------------------------------------------------------
" Snippets
" ---------------------------------------------------------------------------
" Snippet manager. When you get all Snippets, who needs Textmate anymore ;)
" Dependencies
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
" Additional snippets for snipmate
Bundle 'honza/snipmate-snippets'
" Add the main Plugin
Bundle 'garbas/vim-snipmate'
let g:snips_author='Sudar'

" ---------------------------------------------------------------------------
" External Applications
" ---------------------------------------------------------------------------
" Publish blog posts from Vim. Who needs Windows Live editor any more ;)
Bundle 'VimRepress'
" Blog configuration
let VIMPRESS = [{'username':'admin',
                \'blog_url':'http://sudarmuthu.com/wpfiles'
                \}]

"Post to twitter from vim
Bundle 'TwitVim'

" ---------------------------------------------------------------------------
" Color Schemes 
" ---------------------------------------------------------------------------

" Color Schemes explorer. Browse through the different color schemes
Bundle 'Color-Scheme-Explorer'

" Programmer Color scheme
Bundle 'pw' 

" Light ColorScheme
Bundle 'lightdiff'

" 256 color schemes
Bundle 'Eddie.vim'
Bundle 'desert256.vim'
Bundle 'ciaranm/inkpot'
Bundle '256-grayvim'

" Set the default color scheme
colorscheme desert256

" color schemes
if &t_Co >= 256 || has("gui_running")
   colorscheme desert 
endif

" ---------------------------------------------------------------------------
" Space and Tab related settings 
" ---------------------------------------------------------------------------

set expandtab     " Expand tab to spaces
set tabstop=4     " Width of a tab is 4
set shiftwidth=4  " number of spaces to use for auto indenting
set softtabstop=4 " When backspace is used to delete spaces, delete 4 at a time. This is equal to tabstop and shfitwidth

set nowrap        " don't wrap lines
set scrolloff=5   " Show atleast 5 lines around the cursor

set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoindent    " always set auto indenting on
set copyindent    " copy the previous indentation on autoindenting
set smartindent   " Set intent smartly

set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop

set number        " always show line numbers
set ruler         " Show the current line number in the status bar

" ---------------------------------------------------------------------------
" Common settings
" ----------------------------------------------------------------------------
set hidden		  " Hides buffer instead of closing them. You can use <C-o> and <C-i> to iterate the buffers.

" Set to auto read when a file is changed from the outside
set autoread

" History related settings
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo

" Visual settings
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

" Filesystem handling settings
set nobackup
set noswapfile
set wildignore=*.swp,*.bak,*.pyc,*.class "Ignore these files while doing file completion
set wildmode=longest,list " Start file completion with the longest match

" Search related settings
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,case-sensitive otherwise
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

" Clear highlighted searches
nmap <silent> ,/ :nohlsearch<CR>

" Use Tab for moving to next matching tag
nnoremap <tab> %
vnoremap <tab> %

" Enable Mouse
set mouse=a

" Highlight current line 
set cursorline 

" ----------------------------------------------------------------------------
" Spelling
" ----------------------------------------------------------------------------
set spell
set spellfile=~/.vim/spell/en.utf-8.add " custom spell check file
set spelllang=en_us

" ----------------------------------------------------------------------------
" Key mappings
" ----------------------------------------------------------------------------
  
" Paste without messing up formatting.
set pastetoggle=<F2>

" change the mapleader from \ to ,
let mapleader=","

" Map ' to : so that you can save pressing shift
nnoremap ' :

" forgot sudo while opening the file
cmap w!! w !sudo tee % >/dev/null

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" ----------------------------------------------------------------------------
" Command Mode settings
" ----------------------------------------------------------------------------
" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" This shows what you are typing as a command.  I love this!
set showcmd

" ----------------------------------------------------------------------------
" Visual Mode settings
" ----------------------------------------------------------------------------
"Select previously pasted text for quick formatting.
nnoremap <leader>v V`]

" ----------------------------------------------------------------------------
" Normal Mode settings
" ----------------------------------------------------------------------------
" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Escape insert mode without pressing esc
:imap jj <Esc>

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> Zj o<Esc>
nnoremap <silent> Zk O<Esc>

" Map F1 key to Esc. Would be interested in those situations where you hit f1 by default
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

"Move a line of text using ALT+[jk] 
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" ----------------------------------------------------------------------------
" Window/tab settings
" ----------------------------------------------------------------------------
" Mapping for tabs
nmap <silent> <Leader>h :tabp<CR>
nmap <silent> <Leader>l :tabn<CR>
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt
nmap <leader>0 10gt

" Easy window navigation. Prevents another keypress.
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" ----------------------------------------------------------------------------
" Buffer open/close
" ----------------------------------------------------------------------------

" Automatically cd into the directory that the file is in
autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')

" Save and load folds while closing and opening files
let g:skipview_files = [
            \ '[EXAMPLE PLUGIN BUFFER]'
            \ ]
function! MakeViewCheck()
    if has('quickfix') && &buftype =~ 'nofile'
        " Buffer is marked as not a file
        return 0
    endif
    if empty(glob(expand('%:p')))
        " File does not exist on disk
        return 0
    endif
    if len($TEMP) && expand('%:p:h') == $TEMP
        " We're in a temp dir
        return 0
    endif
    if len($TMP) && expand('%:p:h') == $TMP
        " Also in temp dir
        return 0
    endif
    if index(g:skipview_files, expand('%')) >= 0
        " File is in skip list
        return 0
    endif
    return 1
endfunction
augroup vimrcAutoView
    autocmd!
    " Autosave & Load Views.
    autocmd BufWritePost,BufLeave,WinLeave ?* if MakeViewCheck() | mkview | endif
    autocmd BufWinEnter ?* if MakeViewCheck() | silent loadview | endif
augroup end

" ----------------------------------------------------------------------------
" Code Formatting settings
" ----------------------------------------------------------------------------
" Move { from separate lines into the end of the previous line
map <leader>cf :g/^\s*{\s*$/normal kJ <CR>

" ----------------------------------------------------------------------------
" File type specific settings
" ----------------------------------------------------------------------------
filetype plugin indent on " Enable filetype specific features including intend

if &t_Co > 2 || has("gui_running")
   	" switch syntax highlighting on, when the terminal has colors
    syntax on
endif

" -------- HTML----------------------------------------------------------------
"Fold HTML Tag
nnoremap <leader>ft Vatzf
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

" Zen Coding. Expands HTML abbreviations. TODO: Need to decide between one of these
Bundle 'mattn/zencoding-vim.git' 
let g:use_zen_complete_tag = 1 " for tag auto complete.
" Similar to Zen coding. But uses <c-e> as shortcut
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}

" ---------CSS ---------------------------------------------------------------
"Sort CSS properties
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

" Syntax highlight for CSS
Bundle 'kight/CSS3-syntax-file-for-vim'

" -------- JavaScript -------------------------------------------------------------
"The default folding in JavaScript is broken. So let's fix it
au FileType javascript call JavaScriptFold() 
au FileType javascript setl fen
au FileType javascript setl nocindent

function! JavaScriptFold()
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction

" autocomplete options
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

" Syntastic options
let g:syntastic_javascript_checker="jslint" "Use jslint as the checker
let g:syntastic_javascript_jslint_conf = "--sloppy" "options for jslint

" code formatter for JavaScript using jsbeautify
Bundle 'maksimr/vim-jsbeautify'
Bundle 'einars/js-beautify'

" jsbeautify options
let g:jsbeautify_file = fnameescape("/Users/sudarm/code/dotfiles/vim/vim/bundle/js-beautify/beautify.js") " set path to js-beautify file
let g:jsbeautify = {"indent_size": 4, "jslint_happy": "true", "space_before_conditional": "true"}

" -------- PHP --------------------------------------------------------------------
" PHP Integration for vim
" Bundle 'spf13/PIV'

" Config for folding
let php_folding = 2        "Set PHP folding of classes and functions and all {}
let php_htmlInStrings = 1  "Syntax highlight HTML code inside PHP strings.
let php_sql_query = 1      "Syntax highlight SQL code inside PHP strings.
let php_noShortTags = 1    "Disable PHP short tags.
let php_baselib = 1        "for highlighting baselib functions
let php_alt_comparisons= 1 "to highlight comparison operators in an alternate colour

autocmd FileType php set omnifunc=phpcomplete#CompletePHP
" Surround configuration for PHP. Adds yss- command
autocmd FileType php let b:surround_45 = "<?php \r ?>"
" -------- Python -----------------------
autocmd filetype python set expandtab
autocmd FileType python set omnifunc=pythoncomplete#Complete

" -------- C -----------------------
autocmd FileType c set omnifunc=ccomplete#Complete

" -------- Perl -----------------------
let perl_fold=1               " Perl

" -------- R -----------------------
let r_syntax_folding=1        " R

" -------- Ruby -----------------------
let ruby_fold=1               " Ruby

" -------- Shell Scripts -----------------------
let sh_fold_enabled=1         " sh

" -------- Vim Scripts -----------------------
let vimsyn_folding='af'       " Vim script

" -------- XML Files -----------------------
let xml_syntax_folding=1      " XML
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags

" -------- Text/Markdown -----------------------
" Text mode
command TextMode setlocal nolist wrap linebreak scrolloff=999

" Plain text files are Markdown
autocmd BufNewFile,BufRead *.txt setlocal ft=markdown
autocmd BufNewFile,BufRead *.text setlocal ft=markdown
autocmd FileType markdown TextMode
autocmd BufNewFile,BufRead requirements.txt setlocal ft=

" Allow these file extensions to be accessed via 'gf' of only the name, for
" e.g. gf on [[AnotherPage]] should go to AnotherPage.md
set suffixesadd=.md,.txt

" Markdown support
Bundle 'swaroopch/vim-markdown'
Bundle 'swaroopch/vim-markdown-preview'

" ---------------------------------------------------------------------------
" Arduino
" ---------------------------------------------------------------------------
" Syntax highlighting for Arduino
Bundle 'sudar/Arduino-syntax-file'

autocmd! BufNewFile,BufRead *.pde setlocal ft=arduino
autocmd! BufNewFile,BufRead *.ino setlocal ft=arduino
" ---------------------------------------------------------------------------
" Abbreviations
" ---------------------------------------------------------------------------
" Common Typos
abbr teh the

" Lines
abbr -- ------------
abbr ==== ===============
