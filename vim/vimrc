set nocompatible               " be iMproved

" vim exists with a non-zero exit code, if filetype off is called without filetype on,
" which messes up when vim is used as the editor for git commits
" Vundle requires to turn filetype off, because of this bug https://github.com/gmarik/vundle/issues/176#issuecomment-12996848
filetype on
filetype off

" ---------------------------------------------------------------------------
" Vundle configurations.
" ---------------------------------------------------------------------------
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

" ---------------------------------------------------------------------------
" Source Control Management
" ---------------------------------------------------------------------------
" Updated Vim-Git runtime files
Bundle 'tpope/vim-git'

" Git wrapper for vim. Who needs git bash any more ;)
Bundle 'tpope/vim-fugitive'

" Highlight changes.
" Jump between changes using ]c and [c
" Stage the hunk with <Leader>hs
" Revert it with <Leader>hr
if has('signs')
    Bundle 'airblade/vim-gitgutter'

    " Options for gitgutter. More available at https://github.com/airblade/vim-gitgutter
    let g:gitgutter_escape_grep = 1   " Use raw grep
    let g:gitgutter_eager = 0         " Don't run eagerly
endif

" ---------------------------------------------------------------------------
" Navigation
" ---------------------------------------------------------------------------
" Navigate the document like a pro. Who needs a mouse any more ;)
" Press <leader><Leader>j or <Leader><Leader>k
Bundle 'Lokaltog/vim-easymotion'

" open items from quickfix window in a new tab
set switchbuf+=usetab,newtab

" Unfold the line if going to an exact line number
nnoremap <expr> G (v:count ? 'Gzv' : 'G')

" ---------------------------------------------------------------------------
" Status bar
" ---------------------------------------------------------------------------
" Add more features to the status bar
Bundle 'bling/vim-airline'
let g:airline_theme="bubblegum"
set laststatus=2
set fillchars+=stl:\ ,stlnc:\

" Show buffer list in status bar
Bundle 'bling/vim-bufferline'
" Don't echo in command bar
let g:bufferline_echo = 0

" ---------------------------------------------------------------------------
" Source code handling
" ---------------------------------------------------------------------------
if v:version > 702
    " Syntax Highlighter
    Bundle 'scrooloose/syntastic.git'
    let g:syntastic_check_on_open = 1   " Enable syntax check when a file is opened or saved
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_quiet_messages = { "level" : "warnings" }
    nmap <F6> :SyntasticToggleMode<CR> " Toggle Syntax highlight
endif

" Show signs at locations which are of interest in Quickfix window
Bundle 'tomtom/quickfixsigns_vim'

" Bulk (Un)Comment line.
Bundle 'sudar/comments.vim'

" Vim-bad-whitespace, highlights bad whitespace
" use EraseBadWhitespace command to erase bad whitespace
Bundle 'bitc/vim-bad-whitespace'

" Automatically close tags, quotes etc
Bundle 'Raimondi/delimitMate'
let delimitMate_expand_cr=1

" Automatically match tags and braces in different files.
Bundle 'matchit.zip'
" Python match support
Bundle 'python_match.vim'

" Add additional match pairs
set matchpairs+=<:>

" Load the build-in global doxygen syntax
let g:load_doxygen_syntax=1

" Move { from separate lines into the end of the previous line
command! MoveBraces :g/^\s*{\s*$/normal kJ <CR>

"Allows to align variable declarations
Bundle "godlygeek/tabular"
" Align PHP Doc statements. Code from http://stackoverflow.com/q/22764695/24949
command! -range TabDoc :Tabularize/@\w\+\s\+\zs\w\+\|\%(@\w\+.*\)\@<=\u.*/

" Allows you to split and joins lines and reformat them
" use gS and gJ
Bundle "AndrewRadev/splitjoin.vim"

" Auto increment numbers and dates in visual block
Bundle 'VisIncr'

" Display TODO from different opened files.
Bundle "TaskList.vim"
map <Leader>to <Plug>TaskList

" Open docs for current function. use gK
Bundle 'Keithbsmiley/investigate.vim'
let g:investigate_use_dash=1

if has("gui_macvim")
    " Auto complete on steroids
    Bundle "Valloric/YouCompleteMe"

    " Disable autocomplete for markdown files
    let g:ycm_filetype_blacklist = {
      \ 'markdown' : 1
      \}

    let g:ycm_seed_identifiers_with_syntax=1 "load language keywords in identifier list
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

    " YouCompleteMe and ultisnips compatibility
    " Got the code from https://github.com/Valloric/YouCompleteMe/issues/420

    function! g:UltiSnips_Complete()
        call UltiSnips#ExpandSnippet()
        if g:ulti_expand_res == 0
            if pumvisible()
                return "\<C-n>"
            else
                call UltiSnips#JumpForwards()
                if g:ulti_jump_forwards_res == 0
                return "\<TAB>"
                endif
            endif
        endif
        return ""
    endfunction

    func! g:jInYCM()
        if pumvisible()
            return "\<C-n>"
        else
            return "\<c-j>"
    endfunction

    func! g:kInYCM()
        if pumvisible()
            return "\<C-p>"
        else
            return "\<c-k>"
    endfunction

    inoremap <c-j> <c-r>=g:jInYCM()<cr>
    au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:kInYCM()<cr>"
    au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"

    let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsListSnippets="<c-e>"

else
    " if you don't have YouCompleteMe installed, then go with default mapping
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

" ---------------------------------------------------------------------------
" Snippets
" ---------------------------------------------------------------------------
" Snippet manager. When you get all Snippets, who needs Textmate anymore ;)
Bundle 'SirVer/ultisnips'

" Snippets for different languages
Bundle 'honza/vim-snippets'

" Snippet global options
let g:snips_author='Sudar'
let g:snips_author_email='sudar@sudarmuthu.com'
let g:UltiSnipsEditSplit="vertical"  ":UltiSnipsEdit will split the window.

" ---------------------------------------------------------------------------
" Common edit functionalities
" ---------------------------------------------------------------------------
" Smart yanking
Bundle 'YankRing.vim'
nmap <Leader>yy :YRShow<CR>
let g:yankring_history_dir = '~/.vim/yankring'

" Surround - Easily change, add and delete around surroundings
Bundle 'tpope/vim-surround'
" Key mappings
" Normal mode
"-----------
"ds  - delete a surrounding
"cs  - change a surrounding
"ysiw(  - add a surrounding
"ys2aw" - add a surrounding for two words
"yS  - add a surrounding and place the surrounded text on a new line + indent it
"yss - add a surrounding to the whole line
"ySs - add a surrounding to the whole line, place it on a new line + indent it
"ySS - same as ySs

"Visual mode
"-----------
"s   - in visual mode, add a surrounding
"S   - in visual mode, add a surrounding but place text on new line + indent it

"Insert mode
"-----------
"<CTRL-s> - in insert mode, add a surrounding
"<CTRL-s><CTRL-s> - in insert mode, add a new line + surrounding + indent
"<CTRL-g>s - same as <CTRL-s>
"<CTRL-g>S - same as <CTRL-s><CTRL-s>

" Repeat the last command. Press . to repeat the last command.
Bundle "tpope/vim-repeat"

" Provides paired key mappings
Bundle "tpope/vim-unimpaired"

" ---------------------------------------------------------------------------
" Searching/Replacing
" ---------------------------------------------------------------------------
" Smart abbreviation, Coercion, find and replace
" abbreviations are stored in after/plugin/abolish.vim
" :S for smart search and replace
Bundle 'tpope/vim-abolish'
" :cr{} Following options are used for coercion
" c: camelCase
" m: MixedCase
" _: snake_case
" s: snake_case
" u: SNAKE_UPPERCASE
" U: SNAKE_UPPERCASE
" -: dash-case (not reversible)

" To use ack inside vim. You need to install ack. Either do brew install ack or use aptitude
Bundle 'mileszs/ack.vim'
"if executable("/usr/bin/ack-grep")
    "" Need this in my Ubuntu install
    "let g:ackprg="ack-grep -H --nocolor --nogroup --column"
"endif

" ---------------------------------------------------------------------------
" External Applications
" ---------------------------------------------------------------------------
if has("gui_macvim")

    " Make writing Blog posts easier. Run :WriterToggle
    Bundle 'honza/writer.vim'

    " Export syntax highlighted code into rtf. This only works in Mac
    if executable('pbcopy') && executable('textutil')
        Bundle 'zerowidth/vim-copy-as-rtf'
    endif
endif

" Open browser
Bundle 'tyru/open-browser.vim'

" Publish blog posts from Vim. Who needs Windows Live editor any more ;)
Bundle 'pentie/VimRepress'

"Post to twitter from vim
Bundle 'TwitVim'

" ---------------------------------------------------------------------------
" Color Schemes
" ---------------------------------------------------------------------------
" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif

" Color Schemes explorer. Browse through the different color schemes
Bundle 'Color-Scheme-Explorer'

" Programmer Color scheme
Bundle 'pw'

" Light ColorScheme
Bundle 'lightdiff'

" 256 color schemes
Bundle 'Eddie.vim'
Bundle 'desert256.vim'
Bundle 'ciaranm/inkpot'
Bundle '256-grayvim'

" 16 color Schemes
Bundle 'noahfrederick/vim-noctu'

" GUI color Schemes
Bundle 'noahfrederick/vim-hemisu'

" Everyone is talking about this
Bundle 'altercation/vim-colors-solarized'

" Set the default color scheme
if has("gui_running")
    let g:solarized_contrast="high"
    set background=dark
    colorscheme solarized
else
    colorscheme noctu
endif

" ---------------------------------------------------------------------------
" file type specific Bundles.
" ---------------------------------------------------------------------------
" They need to present before setting filetype, because of this bug https://github.com/gmarik/vundle/issues/176#issuecomment-12996848

" Jade
Bundle 'digitaltoad/vim-jade'

" Zen Coding. Expands HTML abbreviations.
Bundle 'mattn/emmet-vim'
" Language specific settings
let g:user_emmet_settings = {
\  'php' : {
\    'extends' : 'html',
\    'filters' : 'c',
\  },
\  'xml' : {
\    'extends' : 'html',
\  },
\  'haml' : {
\    'extends' : 'html',
\  },
\}

" Syntax highlight for CSS
Bundle 'JulesWang/css.vim'

" code formatter for JavaScript using jsbeautify
Bundle 'maksimr/vim-jsbeautify'
"The actual beautifier
Bundle 'einars/js-beautify'

" PHP syntax
Bundle 'StanAngeloff/php.vim'

" PHP indent. Need this only till v1.49+ goes into vim distribution
Bundle '2072/PHP-Indenting-for-VIm'

" PHP autocomplete
let g:phpcomplete_parse_docblock_comments=1
Bundle 'shawncplus/phpcomplete.vim'

" WordPress
let g:wordpress_vim_wordpress_path="~/Dropbox/code/wp/sites/wordpress/"
Bundle 'dsawardekar/wordpress.vim'

" WordPress snippets
Bundle 'sudar/vim-wordpress-snippets'

"  Pig syntax
Bundle 'motus/pig.vim'

" Pig snippets. TODO: Make it compatible with UltiSnips
Bundle 'rverk/snipmate-pig'

" Syntax highlighting for Arduino
Bundle 'sudar/vim-arduino-syntax'

" Add Arduino snippets
Bundle 'sudar/vim-arduino-snippets'

" ---------------------------------------------------------------------------
" custom folder for misc stuff
" ---------------------------------------------------------------------------
set rtp+=~/.vim/custom/

" Open up Man pages from Vim itself. eg: Man printf
runtime! ftplugin/man.vim

" ---------------------------------------------------------------------------
"  ******** All Bundle configuration ends here ********
" ----------------------------------------------------------------------------
filetype plugin indent on " Enable filetype specific features including indent

if &t_Co > 2 || has("gui_running")
    " switch syntax highlighting on, when the terminal has colors
    syntax on
endif

" ---------------------------------------------------------------------------
" Space and Tab related settings
" ---------------------------------------------------------------------------
set expandtab     " Expand tab to spaces
set tabstop=4     " Width of a tab is 4
set shiftwidth=4  " number of spaces to use for auto indenting
set softtabstop=4 " When backspace is used to delete spaces, delete 4 at a time. This is equal to tabstop and shfitwidth

set nowrap        " don't wrap lines
set scrolloff=5   " Show at least 5 lines around the cursor

set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoindent    " always set auto indenting on
set copyindent    " copy the previous indentation on autoindenting
set smartindent   " Set intent smartly

set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set wildmenu      " Enhance auto completion

set number        " always show line numbers
set ruler         " Show the current line number in the status bar

" ---------------------------------------------------------------------------
" Common settings
" ----------------------------------------------------------------------------
" Set to auto read when a file is changed from the outside
set autoread

" History related settings
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo

" Visual settings
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

" ---------------------------------------------------------------------------
" Search settings
" ----------------------------------------------------------------------------
set ignorecase    " ignore case when searching. use \C to force case sensitiveness
set smartcase     " ignore case if search pattern is all lowercase,case-sensitive otherwise
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

" Clear highlighted searches
nmap <silent> ,/ :nohlsearch<CR>

" ---------------------------------------------------------------------------
" GUI options
" ---------------------------------------------------------------------------
if has('gui_running')
    set guioptions=egmrLt "Disable Toolbar"
    set cursorline " Highlight current line
    set mouse=a " Enable Mouse
endif

if has("gui_macvim")
    set guifont=Monaco:h14
endif

" ---------------------------------------------------------------------------
" Filesystem handling settings
" ---------------------------------------------------------------------------
set nobackup
set noswapfile
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,*.hex,*.elf "Ignore these files while doing file completion
set wildmode=longest,list " Start file completion with the longest match

" ----------------------------------------------------------------------------
" Spelling
" ----------------------------------------------------------------------------
set spell
set spellfile=~/.vim/spell/en.utf-8.add " custom spell check file
set spelllang=en_us
set spellsuggest=best

" ----------------------------------------------------------------------------
" Key mappings
" ----------------------------------------------------------------------------
" change the mapleader from \ to ,
let mapleader=","

" Paste without messing up formatting.
set pastetoggle=<F2>

" forgot sudo while opening the file
cmap w!! w !sudo tee % >/dev/null

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" ----------------------------------------------------------------------------
" Command Mode settings
" ----------------------------------------------------------------------------
" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" This shows what you are typing as a command.  I love this!
set showcmd

" ----------------------------------------------------------------------------
" Visual Mode settings
" ----------------------------------------------------------------------------
"Select previously pasted text for quick formatting.
nnoremap <leader>v V`]

" Function to hide all the text except for the text selected in visual mode.
" This is great for highlighting parts of the code. Just call the function
" again to deselect everything.
function! ToggleSelected(visual) range
    highlight HideSelected ctermfg=bg ctermbg=bg
                         \ guifg=bg guibg=bg gui=none term=none cterm=none

    if exists("g:toggle_selected_hide")
        call matchdelete(g:toggle_selected_hide)

        unlet g:toggle_selected_hide
        redraw

        if !a:visual
            return
        endif
    endif

    let [lnum1, col1] = getpos("'<")[1:2]
    let [lnum2, col2] = getpos("'>")[1:2]

    let pattern = '\%^\|\%<'.lnum1.'l\|\%<'.col1.'v\|\%>'.lnum2.'l\|\%>'.col2.'v'
    let g:toggle_selected_hide = matchadd('HideSelected', pattern, 1000)

    redraw
endfunction

" Show only selected in Visual Mode
nmap <silent> <leader>th :cal ToggleSelected(0)<CR>
vmap <silent> <leader>th :cal ToggleSelected(1)<CR>

" ----------------------------------------------------------------------------
" Normal Mode settings
" ----------------------------------------------------------------------------
" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Escape insert mode without pressing esc
:imap jj <Esc>

" When pushing j/k on a line that is wrapped, it navigates to the same line,
" just to the expected location rather than to the next line
nnoremap j gj
nnoremap k gk

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> Zj o<Esc>
nnoremap <silent> Zk O<Esc>

" Map F1 key to Esc. Would be interested in those situations where you hit f1 by default
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

"Move a line of text using ALT+[jk]
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Copy previous line word by word
imap <C-L> @@@<ESC>hhkywjl?@@@<CR>P/@@@<CR>3s

" ----------------------------------------------------------------------------
" Window/tab settings
" ----------------------------------------------------------------------------
" Mapping for tabs
nmap <silent> <Leader>h :tabp<CR>
nmap <silent> <Leader>l :tabn<CR>
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt
nmap <leader>0 10gt

" Easy window navigation. Prevents another keypress.
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" ----------------------------------------------------------------------------
" Buffer open/close
" ----------------------------------------------------------------------------
" Save and load folds while closing and opening files
let g:skipview_files = [
            \ '[EXAMPLE PLUGIN BUFFER]'
            \ ]
function! HasFileName()
    if has('quickfix') && &buftype =~ 'nofile'
        " Buffer is marked as not a file
        return 0
    endif
    if empty(glob(expand('%:p')))
        " File does not exist on disk
        return 0
    endif
    if len($TEMP) && expand('%:p:h') == $TEMP
        " We're in a temp dir
        return 0
    endif
    if len($TMP) && expand('%:p:h') == $TMP
        " Also in temp dir
        return 0
    endif
    if index(g:skipview_files, expand('%')) >= 0
        " File is in skip list
        return 0
    endif
    return 1
endfunction

" Automatically cd into the directory that the file is in
autocmd BufEnter ?* if HasFileName() | execute "chdir ".escape(expand("%:p:h"), ' ') | endif

" Close empty buffers. Copied from http://stackoverflow.com/a/6561076/24949
function! DeleteEmptyBuffers()
    let [i, n; empty] = [1, bufnr('$')]
    while i <= n
        if bufexists(i) && bufname(i) == ''
            call add(empty, i)
        endif
        let i += 1
    endwhile
    if len(empty) > 0
        exe 'bdelete' join(empty)
    endif
endfunction

" ----------------------------------------------------------------------------
" File type specific settings. These should ideally go to /ftplugin/*
" ----------------------------------------------------------------------------
" -------- Text/Markdown -----------------------
" Plain text files are Markdown
autocmd BufNewFile,BufRead *.txt,*.text,*.md setlocal ft=markdown
autocmd BufNew,BufNewFile,BufRead requirements.txt setlocal ft=

autocmd FileType markdown setlocal nolist wrap linebreak scrolloff=999

" Allow these file extensions to be accessed via 'gf' of only the name, for
" e.g. gf on [[AnotherPage]] should go to AnotherPage.md
set suffixesadd=.md,.txt

" -------- C -----------------------
autocmd FileType c set omnifunc=ccomplete#Complete

" -------- C++ -----------------------
" switch between header/source with F4
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

" -------- Perl -----------------------
let perl_fold=1               " Perl

" -------- R -----------------------
let r_syntax_folding=1        " R

" -------- Ruby -----------------------
let ruby_fold=1               " Ruby

" -------- Shell Scripts -----------------------
let sh_fold_enabled=1         " sh

" -------- Vim Scripts -----------------------
let vimsyn_folding='af'       " Vim script

" -------- XML Files -----------------------
let xml_syntax_folding=1      " XML
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags

" ---------------------------------------------------------------------------
" Abbreviations
" ---------------------------------------------------------------------------
" Common Typos
abbr teh the
abbr adn and

" Lines
abbr ---- ------------
abbr ==== ===============
abbr #### ###############

" Insert current date in insert mode
iab <expr> dts strftime("%b %d, %Y")
